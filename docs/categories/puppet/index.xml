<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>puppet on xkyle.com</title>
    <link>/categories/puppet/</link>
    <description>Recent content in puppet on xkyle.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Oct 2015 18:21:14 +0000</lastBuildDate>
    
	<atom:link href="/categories/puppet/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Configuration Management Rosetta Stone: Configuring Sensu with Puppet, Chef, Ansible and Salt</title>
      <link>/configuration-management-rosetta-stone-configuring-sensu-with-puppet-chef-ansible-and-salt/</link>
      <pubDate>Sun, 11 Oct 2015 18:21:14 +0000</pubDate>
      
      <guid>/configuration-management-rosetta-stone-configuring-sensu-with-puppet-chef-ansible-and-salt/</guid>
      <description>I recently finished my Intermediate Sensu Training on Udemy. It was a ton of work but I&#39;m glad I got it all together. Part of that training includes how to deploy and configure Sensu with four of the most popular open-source configuration management tools: Puppet, Chef, Ansible, and Salt.
 TOC {:toc}  The Sensu Decree In order to do the training I had to learn each of these tools enough so I could install a baseline Sensu installation.</description>
    </item>
    
    <item>
      <title>Getting Started Puppet Acceptance Tests With Beaker</title>
      <link>/Getting-Started-Puppet-Acceptance-Tests-With-Beaker/</link>
      <pubDate>Sun, 11 May 2014 10:18:56 +0000</pubDate>
      
      <guid>/Getting-Started-Puppet-Acceptance-Tests-With-Beaker/</guid>
      <description>Beaker is a test framework created by Puppetlabs to run tests against puppet modules on real servers (vm, containers whatever) and test that they do what they say they should do.
This is a quick tutorial on how to use this framework. At the time of this writing, Beaker is under heavy development, so this could all change.
The Gem The first thing you need to do is install beaker. Usually this is as simple as adding it to your Gemfile and running bundle install.</description>
    </item>
    
    <item>
      <title>Managing Ssh Known Hosts With-Serf</title>
      <link>/Managing-Ssh-Known-Hosts-With-Serf/</link>
      <pubDate>Sun, 06 Apr 2014 05:33:58 +0000</pubDate>
      
      <guid>/Managing-Ssh-Known-Hosts-With-Serf/</guid>
      <description>Serf is a very interesting service discovery mechanism. Its dynamic membership and tags capability make it very flexible. Can we use it to generate a centralized ssh_known_hosts file?
Installing and Configuring Serf I like to use configuration management to manage servers. Here I use a Puppet module to install and configure Serf:
class { &amp;#39;serf&amp;#39;: config_hash =&amp;gt; { &amp;#39;node_name&amp;#39; =&amp;gt; $::fqdn, &amp;#39;tags&amp;#39; =&amp;gt; { &amp;#39;sshrsakey&amp;#39; =&amp;gt; $::sshrsakey }, &amp;#39;discover&amp;#39; =&amp;gt; &amp;#39;cluster&amp;#39;, } } This particular module uses a hash to translate directly into the config.</description>
    </item>
    
    <item>
      <title>What Happens When You Run Puppet Tests</title>
      <link>/What-Happens-When-You-Run-Puppet-Tests/</link>
      <pubDate>Mon, 31 Mar 2014 05:33:58 +0000</pubDate>
      
      <guid>/What-Happens-When-You-Run-Puppet-Tests/</guid>
      <description>Breaking down bundle exec rake spec What is happening when you run:
bundle exec rake spec Bundle The first command you are running is bundle. Bundle is kinda like virtualenv for Ruby. It makes sure that you use the same ruby libraries that you, everyone, and puppetmasters use.
Bundle uses a Gemfile, and searches downwards. As long as you have the Gemfile in the puppet repo, it will work.
Exec The second part is exec.</description>
    </item>
    
    <item>
      <title>Writing Purgable Puppet Code</title>
      <link>/Writing-Purgable-Puppet-Code/</link>
      <pubDate>Wed, 29 Jan 2014 05:33:58 +0000</pubDate>
      
      <guid>/Writing-Purgable-Puppet-Code/</guid>
      <description>Whenever possible, I try to write Puppet code that is purgable and &amp;ldquo;Comment Safe&amp;rdquo;. That is not a very good description. What I mean is, Puppet code that removes resources from a system when the corresponding Puppet code is &amp;ldquo;Commented&amp;rdquo; out of a manifest. Lets look at a few examples.
Example: Managed Sudo Lets say you used this popular sudo module with the following params:
class { &amp;#39;sudo&amp;#39;: purge =&amp;gt; true, } Great start.</description>
    </item>
    
  </channel>
</rss>